swagger: "2.0"
info:
  description: "Gestion des automobiles de collection"
  version: "1.0.0"
  title: "Gestion des automobiles de collection"
  contact:
    email: "apiteam@swagger.io"
basePath: "/api"
produces:
  - application/json
tags:
- name: "voiture"
  description: "gestion des voiture"
- name: "reparation"
  description: "Réparations de la voiture"
- name: "utilisateur"
  description: "partie connexion - creation compte"
schemes:
- "https"
- "http"
paths:
  /voiture:
    post:
      tags:
      - "voiture"
      summary: "Ajout d'une nouvelle voiture"
      description: ""
      operationId: "addCar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Car object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Voiture"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: string
            format: uuid
            example: "40bad878-badf-4601-a729-e0dea0c7cc16"
        "405":
          description: "Invalid input"
  /voiture/{carId}:
    get:
      tags:
      - "voiture"
      summary: "Trouver une voiture par ID"
      description: "Returns a single car"
      operationId: "getCarById"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Voiture"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
    patch:
      tags:
      - "voiture"
      summary: "Modifier une voiture existante"
      description: ""
      operationId: "updateCar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: params
        required: true
        schema:
          $ref: "#/definitions/Voiture"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Voiture"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
        "405":
          description: "Validation exception"
    delete:
      tags:
      - "voiture"
      summary: "Supprimer une voiture"
      description: ""
      operationId: "deleteCar"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: string
            example: "OK"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
    parameters:
      - name: "carId"
        in: "path"
        description: "Car id"
        required: true
        type: "string"
        format: "uuid"
  /voiture/gellAll/{userId}:
    get:
      tags:
      - "voiture"
      summary: "Trouver toute les voitures"
      description: "Returns all cars"
      operationId: "getCarsByUserId"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Voiture"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
    parameters:
      - name: "userId"
        in: "path"
        description: "User id"
        required: true
        type: "string"
        format: "uuid"
  /user/authentification:
    post:
      tags:
      - "utilisateur"
      summary: "connexion"
      description: "connexion via user + passwd"
      operationId: "connexion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Authentification"
      responses:
        "200":
          description: "user connected"
          schema:
              $ref: "#/definitions/UserInfos"
        "404":
          description: "User not found"
  /user/creation:
    post:
      tags:
      - "utilisateur"
      summary: "creation"
      description: "creation de compte"
      operationId: "creation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserInfos"
      responses:
        "200":
          description: "user connected"
          schema:
            type: string
            example: "OK"
        "404":
          description: "User not found"
  /user/modification:
    patch:
      tags:
      - "utilisateur"
      summary: "modification"
      description: "modification de compte"
      operationId: "modification"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserInfos"
      responses:
        "200":
          description: "user modified"
          schema:
            type: string
            example: "OK"
        "404":
          description: "User not found"
  /reparation:
    post:
      tags:
      - "reparation"
      summary: "reparation"
      description: "ajout d'une reparation"
      operationId: "reparation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Reparation"
      responses:
        "200":
          description: "Réparation ajoutée"
          schema:
            type: string
            example: "OK"
        "404":
          description: "Réparation KO"
  /reparation/gellAll/{voitureId}:
    get:
      tags:
      - "reparation"
      summary: "Trouver toute les réparations d'une voiture"
      description: "Returns all repairs"
      operationId: "getReparationByCarId"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Reparation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
    parameters:
      - name: "voitureId"
        in: "path"
        description: "Car id"
        required: true
        type: "string"
        format: "uuid"
definitions:
  Voiture:
    type: "object"
    properties:
      marque:
        type: "string"
        example: "Peugeot"
      modele:
        type: "string"
        example: "205 GTI"
      premiereImmat:
        type: "string"
        format: "date"
        example: "10-10-1991"
      puissanceFiscale:
        type: "integer"
        example: "8"
      prixDachat:
        type: "integer"
        example: "10000"
      prixVenteEstimee:
        type: "integer"
        example: "15000"
      userId:
        type: "string"
        format: "uuid"
        example: "0000-0000"
      id:
        type: "string"
        format: "uuid"
        example: "0000-0000"
  Authentification:
    type: "object"
    properties:
      login:
        type: "string"
        example: "toto"
      password:
        type: "string"
        example: "tata"
  UserInfos:
    type: "object"
    properties:
      login:
        type: "string"
        example: "toto"
      password:
        type: "string"
        example: "tata"
      prenom:
        type: "string"
        example: "Jacques"
      nom:
        type: "string"
        example: "Martin"
  Reparation:
    type: "object"
    properties:
      voiture_id:
        type: "string"
        example: "0001"
      reparation_type:
        type: "string"
        example: "freins"
      fichier:
        type: "boolean"
        example: "false"